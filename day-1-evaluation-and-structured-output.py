#!/usr/bin/env python
# Copyright 2025 Google LLC.

"""
Day 1 - Evaluation and structured output

Overview:
This script implements techniques for evaluating the output of a language model.
It also demonstrates how to use Gemini's structured data capability to produce
evaluation results as instances of Python types.
"""

import os
import enum
import functools
import collections
import itertools
from typing import Tuple, Any, List, Dict

from dotenv import load_dotenv
from google import genai
from google.genai import types
from google.api_core import retry
from IPython.display import Markdown, display

# Setup
def setup_client():
    """Initialize the Gemini client with API key."""
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("No API key found. Set GOOGLE_API_KEY in environment variables.")
    
    client = genai.Client(api_key=api_key)
    
    # Configure automated retry
    is_retriable = lambda e: (isinstance(e, genai.errors.APIError) and e.code in {429, 503})
    if not hasattr(genai.models.Models.generate_content, '__wrapped__'):
        genai.models.Models.generate_content = retry.Retry(
            predicate=is_retriable)(genai.models.Models.generate_content)
    
    return client

# Initialize client
client = setup_client()

# Upload document
def upload_document(filepath):
    """Upload a document to use with Gemini API."""
    document_file = client.files.upload(file=filepath)
    return document_file

# Summarize document
def summarise_doc(request: str, document_file) -> str:
    """Execute the request on the uploaded document."""
    # Set the temperature low to stabilize the output
    config = types.GenerateContentConfig(temperature=0.0)
    response = client.models.generate_content(
        model='gemini-2.0-flash',
        config=config,
        contents=[request, document_file],
    )
    return response.text

# Evaluation classes
class SummaryRating(enum.Enum):
    VERY_GOOD = '5'
    GOOD = '4'
    OK = '3'
    BAD = '2'
    VERY_BAD = '1'

class AnswerRating(enum.Enum):
    VERY_GOOD = '5'
    GOOD = '4'
    OK = '3'
    BAD = '2'
    VERY_BAD = '1'

class AnswerComparison(enum.Enum):
    A = 'A'
    SAME = 'SAME'
    B = 'B'

# Evaluation prompts
SUMMARY_PROMPT = """\
# Instruction
You are an expert evaluator. Your task is to evaluate the quality of the responses generated by AI models.
We will provide you with the user input and an AI-generated responses.
You should first read the user input carefully for analyzing the task, and then evaluate the quality of the responses based on the Criteria provided in the Evaluation section below.
You will assign the response a rating following the Rating Rubric and Evaluation Steps. Give step-by-step explanations for your rating, and only choose ratings from the Rating Rubric.

# Evaluation
## Metric Definition
You will be assessing summarization quality, which measures the overall ability to summarize text. Pay special attention to length constraints, such as in X words or in Y sentences. The instruction for performing a summarization task and the context to be summarized are provided in the user prompt. The response should be shorter than the text in the context. The response should not contain information that is not present in the context.

## Criteria
Instruction following: The response demonstrates a clear understanding of the summarization task instructions, satisfying all of the instruction's requirements.
Groundedness: The response contains information included only in the context. The response does not reference any outside information.
Conciseness: The response summarizes the relevant details in the original text without a significant loss in key information without being too verbose or terse.
Fluency: The response is well-organized and easy to read.

## Rating Rubric
5: (Very good). The summary follows instructions, is grounded, is concise, and fluent.
4: (Good). The summary follows instructions, is grounded, concise, and fluent.
3: (Ok). The summary mostly follows instructions, is grounded, but is not very concise and is not fluent.
2: (Bad). The summary is grounded, but does not follow the instructions.
1: (Very bad). The summary is not grounded.

## Evaluation Steps
STEP 1: Assess the response in aspects of instruction following, groundedness, conciseness, and verbosity according to the criteria.
STEP 2: Score based on the rubric.

# User Inputs and AI-generated Response
## User Inputs

### Prompt
{prompt}

## AI-generated Response
{response}
"""

QA_PROMPT = """\
# Instruction
You are an expert evaluator. Your task is to evaluate the quality of the responses generated by AI models.
We will provide you with the user prompt and an AI-generated responses.
You should first read the user prompt carefully for analyzing the task, and then evaluate the quality of the responses based on and rules provided in the Evaluation section below.

# Evaluation
## Metric Definition
You will be assessing question answering quality, which measures the overall quality of the answer to the question in the user prompt. Pay special attention to length constraints, such as in X words or in Y sentences. The instruction for performing a question-answering task is provided in the user prompt. The response should not contain information that is not present in the context (if it is provided).

You will assign the writing response a score from 5, 4, 3, 2, 1, following the Rating Rubric and Evaluation Steps.
Give step-by-step explanations for your scoring, and only choose scores from 5, 4, 3, 2, 1.

## Criteria Definition
Instruction following: The response demonstrates a clear understanding of the question answering task instructions, satisfying all of the instruction's requirements.
Groundedness: The response contains information included only in the context if the context is present in the user prompt. The response does not reference any outside information.
Completeness: The response completely answers the question with sufficient detail.
Fluent: The response is well-organized and easy to read.

## Rating Rubric
5: (Very good). The answer follows instructions, is grounded, complete, and fluent.
4: (Good). The answer follows instructions, is grounded, complete, but is not very fluent.
3: (Ok). The answer mostly follows instructions, is grounded, answers the question partially and is not very fluent.
2: (Bad). The answer does not follow the instructions very well, is incomplete or not fully grounded.
1: (Very bad). The answer does not follow the instructions, is wrong and not grounded.

## Evaluation Steps
STEP 1: Assess the response in aspects of instruction following, groundedness,completeness, and fluency according to the criteria.
STEP 2: Score based on the rubric.

# User Inputs and AI-generated Response
## User Inputs
### Prompt
{prompt}

## AI-generated Response
{response}
"""

QA_PAIRWISE_PROMPT = """\
# Instruction
You are an expert evaluator. Your task is to evaluate the quality of the responses generated by two AI models. We will provide you with the user input and a pair of AI-generated responses (Response A and Response B). You should first read the user input carefully for analyzing the task, and then evaluate the quality of the responses based on the Criteria provided in the Evaluation section below.

You will first judge responses individually, following the Rating Rubric and Evaluation Steps. Then you will give step-by-step explanations for your judgment, compare results to declare the winner based on the Rating Rubric and Evaluation Steps.

# Evaluation
## Metric Definition
You will be assessing question answering quality, which measures the overall quality of the answer to the question in the user prompt. Pay special attention to length constraints, such as in X words or in Y sentences. The instruction for performing a question-answering task is provided in the user prompt. The response should not contain information that is not present in the context (if it is provided).

## Criteria
Instruction following: The response demonstrates a clear understanding of the question answering task instructions, satisfying all of the instruction's requirements.
Groundedness: The response contains information included only in the context if the context is present in the user prompt. The response does not reference any outside information.
Completeness: The response completely answers the question with sufficient detail.
Fluent: The response is well-organized and easy to read.

## Rating Rubric
"A": Response A answers the given question as per the criteria better than response B.
"SAME": Response A and B answers the given question equally well as per the criteria.
"B": Response B answers the given question as per the criteria better than response A.

## Evaluation Steps
STEP 1: Analyze Response A based on the question answering quality criteria: Determine how well Response A fulfills the user requirements, is grounded in the context, is complete and fluent, and provides assessment according to the criterion.
STEP 2: Analyze Response B based on the question answering quality criteria: Determine how well Response B fulfills the user requirements, is grounded in the context, is complete and fluent, and provides assessment according to the criterion.
STEP 3: Compare the overall performance of Response A and Response B based on your analyses and assessment.
STEP 4: Output your preference of "A", "SAME" or "B" to the pairwise_choice field according to the Rating Rubric.
STEP 5: Output your assessment reasoning in the explanation field.

# User Inputs and AI-generated Responses
## User Inputs
### Prompt
{prompt}

# AI-generated Response

### Response A
{baseline_model_response}

### Response B
{response}
"""

# Evaluation functions
def eval_summary(prompt, ai_response):
    """Evaluate the generated summary against the prompt used."""
    chat = client.chats.create(model='gemini-2.0-flash')

    # Generate the full text response
    response = chat.send_message(
        message=SUMMARY_PROMPT.format(prompt=prompt, response=ai_response)
    )
    verbose_eval = response.text

    # Coerce into the desired structure
    structured_output_config = types.GenerateContentConfig(
        response_mime_type="text/x.enum",
        response_schema=SummaryRating,
    )
    response = chat.send_message(
        message="Convert the final score.",
        config=structured_output_config,
    )
    structured_eval = response.parsed

    return verbose_eval, structured_eval

@functools.cache
def answer_question(question: str, guidance: str = '') -> str:
    """Generate an answer to the question using the uploaded document and guidance."""
    config = types.GenerateContentConfig(
        temperature=0.0,
        system_instruction=guidance,
    )
    response = client.models.generate_content(
        model='gemini-2.0-flash',
        config=config,
        contents=[question, document_file],
    )
    return response.text

@functools.cache
def eval_answer(prompt, ai_response, n=1):
    """Evaluate the generated answer against the prompt/question used."""
    chat = client.chats.create(model='gemini-2.0-flash')

    # Generate the full text response
    response = chat.send_message(
        message=QA_PROMPT.format(prompt=[prompt, document_file], response=ai_response)
    )
    verbose_eval = response.text

    # Coerce into the desired structure
    structured_output_config = types.GenerateContentConfig(
        response_mime_type="text/x.enum",
        response_schema=AnswerRating,
    )
    response = chat.send_message(
        message="Convert the final score.",
        config=structured_output_config,
    )
    structured_eval = response.parsed

    return verbose_eval, structured_eval

@functools.cache
def eval_pairwise(prompt, response_a, response_b, n=1):
    """Determine the better of two answers to the same prompt."""
    chat = client.chats.create(model='gemini-2.0-flash')

    # Generate the full text response
    response = chat.send_message(
        message=QA_PAIRWISE_PROMPT.format(
            prompt=[prompt, document_file],
            baseline_model_response=response_a,
            response=response_b)
    )
    verbose_eval = response.text

    # Coerce into the desired structure
    structured_output_config = types.GenerateContentConfig(
        response_mime_type="text/x.enum",
        response_schema=AnswerComparison,
    )
    response = chat.send_message(
        message="Convert the final score.",
        config=structured_output_config,
    )
    structured_eval = response.parsed

    return verbose_eval, structured_eval

# QA Guidance Prompt class for pairwise evaluation
@functools.total_ordering
class QAGuidancePrompt:
    """A question-answering guidance prompt or system instruction."""

    def __init__(self, prompt, questions, n_comparisons=1):
        """Create the prompt. Provide questions to evaluate against, and number of evals to perform."""
        self.prompt = prompt
        self.questions = questions
        self.n = n_comparisons

    def __str__(self):
        return self.prompt

    def _compare_all(self, other):
        """Compare two prompts on all questions over n trials."""
        results = [self._compare_n(other, q) for q in self.questions]
        mean = sum(results) / len(results)
        return round(mean)

    def _compare_n(self, other, question):
        """Compare two prompts on a question over n trials."""
        results = [self._compare(other, question, n) for n in range(self.n)]
        mean = sum(results) / len(results)
        return mean

    def _compare(self, other, question, n=1):
        """Compare two prompts on a single question."""
        answer_a = answer_question(question, self.prompt)
        answer_b = answer_question(question, other.prompt)

        _, result = eval_pairwise(
            prompt=question,
            response_a=answer_a,
            response_b=answer_b,
            n=n,  # Cache buster
        )

        # Convert the enum to the standard Python numeric comparison values
        if result is AnswerComparison.A:
            return 1
        elif result is AnswerComparison.B:
            return -1
        else:
            return 0

    def __eq__(self, other):
        """Equality check that performs pairwise evaluation."""
        if not isinstance(other, QAGuidancePrompt):
            return NotImplemented
        return self._compare_all(other) == 0

    def __lt__(self, other):
        """Ordering check that performs pairwise evaluation."""
        if not isinstance(other, QAGuidancePrompt):
            return NotImplemented
        return self._compare_all(other) < 0


def run_pointwise_evaluation(questions, guidance_options, num_iterations=1):
    """Run pointwise evaluation on a set of questions with different guidance options."""
    scores = collections.defaultdict(int)
    responses = collections.defaultdict(list)

    for question in questions:
        print(f'## {question}')
        for guidance, guide_prompt in guidance_options.items():
            for n in range(num_iterations):
                # Generate a response
                answer = answer_question(question, guide_prompt)
                
                # Evaluate the response (note that the guidance prompt is not passed)
                written_eval, struct_eval = eval_answer(question, answer, n)
                print(f'{guidance}: {struct_eval}')
                
                # Save the numeric score
                scores[guidance] += int(struct_eval.value)
                
                # Save the responses
                responses[(guidance, question)].append((answer, written_eval))
    
    # Aggregate scores
    for guidance, score in scores.items():
        avg_score = score / (num_iterations * len(questions))
        nearest = AnswerRating(str(round(avg_score)))
        print(f'{guidance}: {avg_score:.2f} - {nearest.name}')
    
    return scores, responses


def run_pairwise_evaluation(questions, guidance_prompts, num_iterations=1):
    """Run pairwise evaluation to rank guidance prompts."""
    prompts = [QAGuidancePrompt(p, questions, num_iterations) for p in guidance_prompts.values()]
    prompt_names = list(guidance_prompts.keys())
    
    # Sort in reverse order, so that best is first
    sorted_results = sorted(prompts, reverse=True)
    
    print("Ranking of guidance prompts:")
    for i, p in enumerate(sorted_results):
        prompt_index = prompts.index(p)
        prompt_name = prompt_names[prompt_index]
        if i:
            print('---')
        print(f'#{i+1}: {prompt_name} - {p}')
    
    return sorted_results


def main():
    """Main function to demonstrate evaluation techniques."""
    # Specify the path to the document
    document_path = 'data/gemini.pdf'  # Update this path
    global document_file
    document_file = upload_document(document_path)
    
    # Basic document summarization
    request = 'Tell me about the training process used here.'
    summary = summarise_doc(request, document_file)
    print("Summary:")
    print(summary)
    print("\n" + "-"*50 + "\n")
    
    # Evaluate the summary
    text_eval, struct_eval = eval_summary(prompt=[request, document_file], ai_response=summary)
    print("Summary Evaluation:")
    print(text_eval)
    print(f"Rating: {struct_eval}")
    print("\n" + "-"*50 + "\n")
    
    # Guidance prompts for QA
    terse_guidance = "Answer the following question in a single sentence, or as close to that as possible."
    moderate_guidance = "Provide a brief answer to the following question, use a citation if necessary, but only enough to answer the question."
    cited_guidance = "Provide a thorough, detailed answer to the following question, citing the document and supplying additional background information as much as possible."
    guidance_options = {
        'Terse': terse_guidance,
        'Moderate': moderate_guidance,
        'Cited': cited_guidance,
    }
    
    # Questions to evaluate
    questions = [
        "How does the model perform on code tasks?",
        "How many layers does it have?",
    ]
    
    # Run pointwise evaluation
    print("Running pointwise evaluation...")
    scores, responses = run_pointwise_evaluation(questions, guidance_options, num_iterations=1)
    print("\n" + "-"*50 + "\n")
    
    # Run pairwise evaluation
    print("Running pairwise evaluation...")
    sorted_prompts = run_pairwise_evaluation(questions, guidance_options, num_iterations=1)


if __name__ == "__main__":
    main()
